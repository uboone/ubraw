////////////////////////////////////////////////////////////////////////
// Class:       TimeDumper
// Module Type: analyzer
// File:        TimeDumper_module.cc
//
// Purpose: Dump time stamps from DAQHeader and DAQHeaderTimeUBooNE.h
//
// FCL parameters:
//
// DAQHeaderProducer           - DAQHeader module label.
// DAQHeaderTimeUBooNEProducer - DAQHeaderTimeUBooNE module label.
// NumDump                     - Number of events to dump (default 10)
// NumProces                   - Number of events to process for statistical purposes
//                               (default infinite).
// UpdateMetadata              - Flag to specify whether to update input file metadata.
//                               Boolean (default false).
// 
// Created 24-Aug-2023  H. Greenlee
//
////////////////////////////////////////////////////////////////////////

#include <cstdint> // uint32_t
#include <iomanip>
#include <sstream>
#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/FileBlock.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "lardataobj/RawData/DAQHeader.h"
#include "ubobj/RawData/DAQHeaderTimeUBooNE.h"
#include "IFDH_service.h"


class TimeDumper;

class TimeDumper : public art::EDAnalyzer {
public:
  explicit TimeDumper(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  TimeDumper(TimeDumper const &) = delete;
  TimeDumper(TimeDumper &&) = delete;
  TimeDumper & operator = (TimeDumper const &) = delete;
  TimeDumper & operator = (TimeDumper &&) = delete;

  // Overrides.
  void analyze(art::Event const & e) override;
  void respondToOpenInputFile(art::FileBlock const& fb) override;	
  void endJob() override;


private:

  // Fcl parameters.

  std::string fDAQHeaderProducer;             // DAQHeader module label.
  std::string fDAQHeaderTimeUBooNEProducer;   // DAQHeaderTimeUBooNE module label.
  int fNumDump;                               // Number of events to dump.
  int fNumProcess;                            // Number of events to process.
  bool fUpdateMetadata;                       // Metadata update flag.

  // Statistics.

  std::vector<std::string> fInputFiles;   // Input files seen.
  int fNumEvents;      // Number of events processed.
  double fTotalDiff;   // Total GPS-host time difference.
  double fTotalDiff2;  // Total GPS-host time square difference.
};


TimeDumper::TimeDumper(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p),
  fNumDump(0),
  fNumProcess(0),
  fUpdateMetadata(false),
  fNumEvents(0),
  fTotalDiff(0.),
  fTotalDiff2(0.)
{

  // Extract fcl parameters.

  fDAQHeaderProducer = p.get<std::string>("DAQHeaderProducer");
  fDAQHeaderTimeUBooNEProducer = p.get<std::string>("DAQHeaderTimeUBooNEProducer");
  fNumDump = p.get<int>("NumDump", 10);
  fNumProcess = p.get<int>("NumProcess", 0);
  fUpdateMetadata = p.get<bool>("UpdateMetadata", false);

  // Report.

  mf::LogInfo("TimeDumper") 
    << "TimeDumper configured with the following parameters:\n"
    << "  DAQHeader producer = " << fDAQHeaderProducer << "\n"
    << "  DAQHeaderTimeUBooNE producer = " << fDAQHeaderTimeUBooNEProducer << "\n"
    << "  Number of events to dump = " << fNumDump << "\n"
    << "  Number of events to process = " << fNumProcess << "\n"
    << "  Metadata update flag = " << fUpdateMetadata;
}

void TimeDumper::analyze(art::Event const & e)
{

  // Check whether we want to process this event.

  ++fNumEvents;
  if(fNumEvents > fNumProcess && fNumProcess > 0)
    return;

  // Collect dump and statistical information.

  double default_ts_fltsec = 0.;
  double gps_ts_fltsec = 0.;
  double ntp_ts_fltsec = 0.;
  double gps_diff = 0.;

  // Get information from DAQHeader.

  art::Handle<raw::DAQHeader> hh1;
  e.getByLabel(fDAQHeaderProducer, hh1);
  if(hh1.isValid()) {
    time_t default_ts = hh1->GetTimeStamp();
    uint32_t default_ts_sec = uint32_t(default_ts >> 32);
    uint32_t default_ts_nsec = uint32_t(default_ts & 0xffffffff);
    default_ts_fltsec = default_ts_sec + 1.e-9 * default_ts_nsec;
  }

  // Get inforrmation from DAQHeaderTimeUBooNE.

  art::Handle<raw::DAQHeaderTimeUBooNE> hh2;
  e.getByLabel(fDAQHeaderTimeUBooNEProducer, hh2);
  if(hh2.isValid()) {

    time_t gps_ts = hh2->gps_time();
    uint32_t gps_ts_sec = uint32_t(gps_ts >> 32);
    uint32_t gps_ts_nsec = uint32_t(gps_ts & 0xffffffff);
    gps_ts_fltsec = gps_ts_sec + 1.e-9 * gps_ts_nsec;

    time_t ntp_ts = hh2->ntp_time();
    uint32_t ntp_ts_sec = uint32_t(ntp_ts >> 32);
    uint32_t ntp_ts_nsec = uint32_t(ntp_ts & 0xffffffff);
    ntp_ts_fltsec = ntp_ts_sec + 1.e-9 * ntp_ts_nsec;

    gps_diff = gps_ts_fltsec - ntp_ts_fltsec;
  }

  // Update statistics.

  fTotalDiff += gps_diff;
  fTotalDiff2 += gps_diff * gps_diff;

  // Maybe do dump.

  if(fNumEvents <= fNumDump || fNumDump == 0) {

    mf::LogInfo("TimeDumper")
      << "\nTime Stamp Information:\n"
      << "Default time: " << std::fixed << std::setprecision(6) << default_ts_fltsec << "\n"
      << "GPS time    : " << std::fixed << std::setprecision(6) << gps_ts_fltsec << "\n"
      << "Host time   : " << std::fixed << std::setprecision(6) << ntp_ts_fltsec << "\n"
      << "GPS-host time difference: " << std::fixed << std::setprecision(6) << gps_diff;
  }
}

void TimeDumper::respondToOpenInputFile(art::FileBlock const& fb)
{
  std::string input_file = fb.fileName();
  fInputFiles.push_back(input_file);
  mf::LogInfo("TimeDumper") << "Input file: " << input_file;
}

void TimeDumper::endJob()
{
  double avg_diff = 0.;
  double avg_diff2 = 0.;
  if(fNumEvents > 0) {
    avg_diff = fTotalDiff / fNumEvents;
    avg_diff2 = fTotalDiff2 / fNumEvents;
  }
  double rms_diff = std::sqrt(avg_diff2 - avg_diff * avg_diff);
  mf::LogInfo log("TimeDumper");
  log << "\nTime Stamp Summary:\n"
      << fNumEvents << " events dumped.\n"
      << "Average GPS-host time difference: " << std::fixed << std::setprecision(6) 
      << avg_diff << "\n"
      << "RMS GPS-host time difference    : " << std::fixed << std::setprecision(6) << rms_diff;

  // Maybe update metadata.

  if(fUpdateMetadata) {
    art::ServiceHandle<ifdh_ns::IFDH> ifdh;
    log << "\n";

    // Loop over input files.

    for(std::string input_file : fInputFiles) {

      // Parse out filename portion of input file path.

      boost::filesystem::path input_path(input_file);
      std::string filename = input_path.filename().string();
      log << "\nUpdating sam metadata for file " << filename << "\n"
          << "Setting gps.offset parameter to " << avg_diff << "\n";
      std::ostringstream json_md;
      json_md << "{\"gps.offset\": " << std::fixed << std::setprecision(6) << avg_diff << "}";
      int rc = ifdh->modifyMetadata(filename,  json_md.str());
      log << "Ifdh return code = " << rc;
    }
  }
}


DEFINE_ART_MODULE(TimeDumper)
