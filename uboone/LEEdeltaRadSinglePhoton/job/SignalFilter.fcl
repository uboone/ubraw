
#include "services_microboone.fcl"
#include "calibration_microboone.fcl"
#include "filters.fcl"
#include "tpcneutrinoidfilter_microboone.fcl"


process_name: SignalFilter

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "reco_stage_1_hist.root" }
  #Timing:                  {}
  #SimpleMemoryCheck:       { ignoreTotal: 1 } # default is one
  RandomNumberGenerator:   {} #ART native random number generator
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_data
  channelstatusservice:    @local::microboone_channelstatus_service
  PhotonVisibilityService: @local::microboone_photonvisibilityservice
                           @table::microboone_services_reco
}
services.DatabaseUtil.ShouldConnect: false

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 filters:
 { 

   FilterSignal:
   {
     module_type: "SignalFilter"
   }

 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 truth: [
 	FilterSignal
       ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [truth] 

}

### Here we try to suppress known and pointless messages
services.message.destinations :
{
  STDCOUT: 
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
     append:     true       #says to append all messages to the output
     categories:
     {
       ChannelFilter:
       {
         limit: 0
         reportEvery: 0
       }
       TrackStitcher:
       {
         limit: 0
         reportEvery: 0
       }
       CRHitRemoval:
       {
         limit: 0
         reportEvery: 0
       }
       default:
       {
         limit: -1  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}

services.DetectorClocksService.InheritClockConfig: false